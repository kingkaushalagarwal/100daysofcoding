#minimum number of adjacent swaps required to make string pallindrome
from collections import deque

class Solution:
    # @param A : list of strings
    # @return an integer
    def check(self, i, j, Q, R):
        # in same row of rook or queen
        if i == Q[0] or i == R[0]:
            return False
        # in same column in rook or queen
        if j == Q[1] or j == R[1]:
            return False
        # diagonal of queen
        dq = Q[0] + Q[1]
        # anti diagonal of queen
        adq = Q[0] - Q[1]
        # diagonal of knight
        dk = i + j
        # anti diagonal of kngiht
        adk = i - j

        # checking for diagonal
        if dk == dq or dk == adq or adk == dq or adk == adq:
            return False

        return True

    def solve(self, A):
        B = []
        n = len(A)
        m = len(A[0])
        for i in range(n):
            A[i] = list(A[i])

        # for storing position of knight,queen and rook
        K = [-1, -1]
        Q = [-1, -1]
        R = [-1, -1]
        for i in range(n):
            for j in range(m):
                if A[i][j] == 'Q':
                    Q[0] = i;
                    Q[1] = j
                elif A[i][j] == 'R':
                    R[0] = i;
                    R[1] = j
                elif A[i][j] == 'K':
                    K[0] = i;
                    K[1] = j

        # checking validity of initial position
        if self.check(K[0], K[1], Q, R) == False:
            return -1

        row = [2, 2, -2, -2, 1, -1, 1, -1]
        col = [1, -1, 1, -1, 2, 2, -2, -2]

        queue = deque()
        queue.append(K)
        count = 0
        k=0
        A[K[0]][K[1]]=-1
        while len(queue) != 0:
            if count>n*m:
                break
            i, j = queue.popleft()
            count += 1
            for c in range(8):
                nr = row[c] + i
                nc = col[c] + j

                # move out of chess board
                if nr < 0 or nr >= n or nc < 0 or nc >= m:
                    continue
                # visited
                elif A[nr][nc] == -1:
                    continue
                elif self.check(nr, nc, Q, R) == False:
                    A[nr][nc] = -1
                    continue
                else:
                    queue.append([nr, nc])
                    A[nr][nc] = -1

            k+=1

        return count
A = ["..............................................", "..............................................",
 "..............................................", "..............................................",
 ".................................R............", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "................................Q.............",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "........................K.....................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", "..............................................",
 "..............................................", ".............................................."]

ans  =Solution().solve(A)
print("ans: ",ans)
